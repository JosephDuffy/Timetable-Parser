{{!< default}}

<h3>Calendar Export</h3>
<div>
	<a href="webcal://{{timetableURL}}" id="subscribe-calendar-anchor">Subscribe automatically to your calendar</a> or <a href="{{urlProtocol}}://{{timetableURL}}" id="download-calendar-anchor">subscribe manually</a> using your calendar app with the following URL (<a href="/faq#how-to-add-to-calendar" title="How to subscribe to your calendar in your own calendar application">how?</a>).
	<div id="calendar-url-display-wrapper" class="copy-text-wrapper">
		<pre id="download-calendar-url-display">{{urlProtocol}}://{{timetableURL}}</pre>
	</div>
</div>
<form id="timetable-options-form" class="form-horizontal">
	<input type="hidden" value="{{baseTimetableURL}}" id="base-calendar-url" />

	<fieldset>
		<legend>Timetable Options</legend>
		<div class="col-sm-6">
			<div class="form-group col-sm-12">
				<div class="checkbox">
					{{! This is a hack to ensure that on submit a value for "addAlarms" is always sent. This wouldn't be needed if the default was false. }}
					<input type="hidden" name="addAlarms" value="false">
					<label>
						<input type="checkbox" name="addAlarms" id="add-alarms-input" value="true" data-default="{{addAlarmsDefault}}" {{#if addAlarms}}checked{{/if}}> Add Alarm
					</label>
					<span class="help-block">Checking this will add alerts (notifications) to the first event in a series of events using the offset specified below.</span>
				</div>
			</div>

			<div class="form-group col-sm-12">
				<label for="alarmOffset" class="col-sm-4 control-label">Alarm Offset</label>
				<div class="input-group col-sm-8">
					<input type="number" class="form-control" name="alarmOffset" id="alarm-offset-input" value="{{alarmOffset}}" data-default="{{alarmOffsetDefault}}" {{#if addAlarms}}required{{else}}disabled{{/if}}>
					<div class="input-group-addon">Minutes</div>
				</div>
				<span class="help-block">A negative offset means that the alert will show before the event. .e.g, "-30" would be 30 minutes before the event's start.</span>
			</div>
		</div>
	</fieldset>

	<button type="submit" class="btn btn-primary" id="update-timetable-url-button">Update URL</button>
</form>

<script>
	var timetableOptionsForm = document.getElementById('timetable-options-form');
	var addAlarmInput = document.getElementById('add-alarms-input');
	var alarmOffsetInput = document.getElementById('alarm-offset-input');
	var baseCalendarURL = document.getElementById('base-calendar-url').value;
	var downloadCalendarAnchor = document.getElementById('download-calendar-anchor');
	var subscribeCalendarAnchor = document.getElementById('subscribe-calendar-anchor');
	var calendarURLDisplayWrapper = document.getElementById('calendar-url-display-wrapper');
	var downloadCalendarURLDisplay = document.getElementById('download-calendar-url-display');
	var addAlarmsDefault = Boolean(addAlarmInput.dataset["default"]);
	var alarmOffsetDefault = parseInt(alarmOffsetInput.dataset["default"]);

	document.getElementById('update-timetable-url-button').className = "hidden";

	timetableOptionsForm.onsubmit = function() {
		updateDownloadURL();

		return false;
	};

	addAlarmInput.onchange = updateDownloadURL;
	alarmOffsetInput.onchange = updateDownloadURL;

	downloadCalendarURLDisplay.onclick = function() {
		if (document.selection) {
            var range = document.body.createTextRange();
            range.moveToElementText(this);
            range.select();
        } else if (window.getSelection) {
            var range = document.createRange();
            range.selectNode(this);
            window.getSelection().addRange(range);
        }
	};

	if (document.queryCommandSupported('copy')) {
		var copyCalendarURLWrapper = document.createElement("DIV");
		copyCalendarURLWrapper.className = "copy-anchor-wrapper";
		var copyAnchor = document.createElement("A");
		copyAnchor.innerHTML = "Copy";
		copyAnchor.title = "Copy timetable calendar URL";
		copyCalendarURLWrapper.appendChild(copyAnchor);

		copyAnchor.onclick = function() {
			var anchor = this;
			var copiedSpan = document.createElement("SPAN");
			copiedSpan.innerHTML = "Copied!";
			copiedSpan.className = 'copy-anchor';

			// Highlight the text and then perform a copy command
			downloadCalendarURLDisplay.onclick();
			document.execCommand('copy');

			copyCalendarURLWrapper.removeChild(anchor);
			copyCalendarURLWrapper.appendChild(copiedSpan);

			setTimeout(function() {
				copyCalendarURLWrapper.removeChild(copiedSpan);
				copyCalendarURLWrapper.appendChild(anchor);
			}, 1500);
		};

		calendarURLDisplayWrapper.appendChild(copyCalendarURLWrapper);
	};

	updateDownloadURL();

	function updateDownloadURL() {
		var addAlarm = addAlarmInput.checked;
		var alarmOffset = parseInt(alarmOffsetInput.value);
		if (addAlarm && isNaN(alarmOffset)) {
			return;
		}

		var queryString = "";

		var hasAddedParam = false;

		if (addAlarm !== addAlarmsDefault) {
			queryString += "?addAlarms=" + addAlarm;
			hasAddedParam = true;
		}

		if (alarmOffset !== alarmOffsetDefault && addAlarm) {
			if (hasAddedParam) {
				queryString += "&"
			} else {
				queryString += "?"
			}
			queryString += "alarmOffset="  + alarmOffset;
			hasAddedParam = true;
		}
		var newCalendarURL = baseCalendarURL + queryString;
		downloadCalendarAnchor.href = document.location.protocol + "//" + newCalendarURL;
		subscribeCalendarAnchor.href = "webcal://" + newCalendarURL;
		downloadCalendarURLDisplay.innerHTML = document.location.protocol + "//" + newCalendarURL;

		window.history.replaceState( {} , '{{title}}', document.location.pathname + queryString);

		alarmOffsetInput.disabled = !addAlarm;
		alarmOffsetInput.required = addAlarm;
	};
</script>

<h3>All Events</h3>

<div class="table-responsive">
	<table class="table table-striped table-hover">
		<thead>
			<tr>
				<th>Start Date</th>
				<th>End Date</th>
				<th>Room</th>
				<th>Module</th>
				<th>Lecturer(s)</th>
			</tr>
		</thead>
		<tbody>
			{{#each entries}}
			<tr>
				<td>{{this.formattedStartDate}}</td>
				<td>{{this.formattedEndDate}}</td>
				<td>{{this.room}}</td>
				<td>{{this.moduleName}} ({{this.moduleCode}})</td>
				<td>{{this.teacher}}</td>
			</tr>
			{{/each}}
		</tbody>
  </table>
</div>